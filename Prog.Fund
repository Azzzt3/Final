# Final

import tkinter as tk
from tkinter import messagebox
import pickle
from datetime import date
from typing import List

# === Original Classes ===

class User:
    def __init__(self, name: str, email: str, password: str):
        self.name = name
        self.email = email
        self.password = password

    def create_account(self):
        print(f"Account created for {self.name}")

    def view_purchase_history(self):
        print("Showing purchase history...")

    def manage_visit(self):
        print("Managing visit...")

class Admin(User):
    def view_sales_data(self):
        print("Viewing real-time sales data...")

class Ticket:
    def __init__(self, ticket_id: str, race_date: date, price: float, ticket_type: str):
        self.ticket_id = ticket_id
        self.race_date = race_date
        self.price = price
        self.ticket_type = ticket_type

class SingleRace(Ticket):
    def __init__(self, ticket_id: str, race_date: date, price: float, race_name: str):
        super().__init__(ticket_id, race_date, price, "SingleRace")
        self.race_name = race_name

    def get_race_details(self):
        print(f"Race: {self.race_name} on {self.race_date}")

class WeekendPackage(Ticket):
    def __init__(self, ticket_id: str, race_date: date, price: float, races_included: List[str]):
        super().__init__(ticket_id, race_date, price, "WeekendPackage")
        self.races_included = races_included

    def get_schedule(self):
        print(f"Weekend schedule includes: {', '.join(self.races_included)}")

class SeasonMembership(Ticket):
    def __init__(self, ticket_id: str, race_date: date, price: float, membership_id: str, valid_until: date):
        super().__init__(ticket_id, race_date, price, "SeasonMembership")
        self.membership_id = membership_id
        self.valid_until = valid_until

    def renew_membership(self):
        print(f"Membership {self.membership_id} renewed until {self.valid_until}")

class GroupDiscount(Ticket):
    def __init__(self, ticket_id: str, race_date: date, price: float, group_size: int, discount_rate: float):
        super().__init__(ticket_id, race_date, price, "GroupDiscount")
        self.group_size = group_size
        self.discount_rate = discount_rate

    def calculate_group_price(self):
        total = self.price * self.group_size * (1 - self.discount_rate)
        print(f"Total group price: ${total:.2f}")
        return total

class TicketOrder:
    def __init__(self, order_date: date, tickets: List[Ticket]):
        self.order_date = order_date
        self.tickets = tickets
        self.total_price = sum(ticket.price for ticket in tickets)

    def calculate_discounts(self):
        print("Discounts calculated (placeholder)")

class CapacityManager:
    def track_sales(self):
        print("Tracking sales...")

    def view_capacity(self):
        print("Viewing venue capacity...")

# === GUI with Tkinter and Pickle ===

users = []

def save_users():
    with open("users.pkl", "wb") as f:
        pickle.dump(users, f)
    messagebox.showinfo("Success", "Users saved to users.pkl")

def load_users():
    global users
    try:
        with open("users.pkl", "rb") as f:
            users = pickle.load(f)
        messagebox.showinfo("Loaded", f"{len(users)} user(s) loaded from file.")
    except FileNotFoundError:
        messagebox.showerror("Error", "No saved users found.")

def create_user():
    name = name_entry.get()
    email = email_entry.get()
    password = password_entry.get()

    if name and email and password:
        user = User(name, email, password)
        user.create_account()
        users.append(user)
        messagebox.showinfo("Account Created", f"User '{name}' added.")
    else:
        messagebox.showwarning("Missing Info", "Please fill all fields.")

root = tk.Tk()
root.title("Ticketing System - User Manager")

tk.Label(root, text="Name").grid(row=0, column=0)
tk.Label(root, text="Email").grid(row=1, column=0)
tk.Label(root, text="Password").grid(row=2, column=0)

name_entry = tk.Entry(root)
email_entry = tk.Entry(root)
password_entry = tk.Entry(root, show="*")

name_entry.grid(row=0, column=1)
email_entry.grid(row=1, column=1)
password_entry.grid(row=2, column=1)

tk.Button(root, text="Create User", command=create_user).grid(row=3, column=0, pady=10)
tk.Button(root, text="Save Users", command=save_users).grid(row=3, column=1)
tk.Button(root, text="Load Users", command=load_users).grid(row=4, column=0, columnspan=2)

root.mainloop()
